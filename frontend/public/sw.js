import { cleanupOutdatedCaches, precacheAndRoute } from "workbox-precaching"
import { clientsClaim } from "workbox-core"

import { initializeApp } from "firebase/app"
import { getMessaging, onBackgroundMessage } from "firebase/messaging/sw"

// Use the precache manifest generated by Vite
precacheAndRoute(self.__WB_MANIFEST)

// Clean up old caches
cleanupOutdatedCaches()

const jsonConfig = new URL(location).searchParams.get("config")
// Firebase config initialization
try {
    const firebaseApp = initializeApp(JSON.parse(jsonConfig))
    const messaging = getMessaging(firebaseApp)

    function isSafari() {
        return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    }

    function isIOS() {
        return [
            'iPad Simulator',
            'iPhone Simulator',
            'iPod Simulator',
            'iPad',
            'iPhone',
            'iPod'
        ].includes(navigator.platform)
        || (navigator.userAgent.includes("Mac") && "ontouchend" in document);
    }

    onBackgroundMessage(messaging, (payload) => {
        const notificationTitle = payload.data.title
        let notificationOptions = {
            body: payload.data.body || "",
        }
        if (payload.data.notification_icon) {
            notificationOptions["icon"] = payload.data.notification_icon
        }

        if (payload.data.raven_message_type === "Image") {
            notificationOptions["image"] = payload.data.content
        }

        if (payload.data.creation) {
            notificationOptions["timestamp"] = payload.data.creation
        }

        const url = `${payload.data.base_url}/raven/channel/${payload.data.channel_id}`

        // Handle different browsers
        if (isIOS() && isSafari() && parseInt(navigator.userAgent.match(/Version\/(\d+)/)[1]) >= 16) {
            // iOS Safari 16.4+ handling
            notificationOptions["actions"] = [
                {
                    action: url,
                    title: "View",
                },
            ]
        } else {
            // Default handling for other browsers
            notificationOptions["data"] = {
                url: url,
            }
        }

        self.registration.showNotification(notificationTitle, notificationOptions)
    })

    if (isIOS() && isSafari() && parseInt(navigator.userAgent.match(/Version\/(\d+)/)[1]) >= 16) {
        self.addEventListener("notificationclick", (event) => {
            event.stopImmediatePropagation()
            event.notification.close()
            
            // Handle iOS action click
            if (event.action) {
                clients.openWindow(event.action)
            }
        })
    } else {
        // Handle other browsers
        self.addEventListener("notificationclick", (event) => {
            event.stopImmediatePropagation()
            event.notification.close()
            if (event.notification.data && event.notification.data.url) {
                clients.openWindow(event.notification.data.url)
            }
        })
    }
} catch (error) {
    console.log("Failed to initialize Firebase", error)
}

self.skipWaiting()
clientsClaim()
console.log("Service Worker Initialized")